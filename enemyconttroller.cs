using System.Collections;
using UnityEngine;
/// <summary>
/// –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –≤—Ä–∞–≥–∞.
/// –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –≤—Å–µ –µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–∏.
/// </summary>
public class Enemycontroller : MonoBehaviour
{
    // LayerMask –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –æ–±—ä–µ–∫—Ç –±—É–¥–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å
    public LayerMask NeedLayer;

    // LayerMask –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –æ–±—ä–µ–∫—Ç–∞
    public LayerMask TeamLayer;

    // –ó–¥–æ—Ä–æ–≤—å–µ –æ–±—ä–µ–∫—Ç–∞ –≤ –Ω–∞—á–∞–ª–µ
    public int HealthPoints = 20;

    // –°–∫–æ–ª—å–∫–æ —É—Ä–æ–Ω–∞ –Ω–∞–Ω–æ—Å–∏—Ç –æ–±—ä–µ–∫—Ç
    public int DamagPoints = 10;

    // –°–∫–æ—Ä–æ—Å—Ç—å –æ–±—ä–µ–∫—Ç–∞
    public float Speed = 2f;

    // –°—Å—ã–ª–∫–∞ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞, –æ—Ç–æ–±—Ä–∞–∂–∞—é—â–∏–π –∑–¥–æ—Ä–æ–≤—å–µ –æ–±—ä–µ–∫—Ç–∞
    public GameObject HPbar;

    // –°—Å—ã–ª–∫–∞ –Ω–∞ SpriteRenderer –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –µ–≥–æ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π
    public SpriteRenderer sr;

    // –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∞–Ω–∏–º–∞—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–∞
    private Animator animator;

    // –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Ñ–∏–∑–∏–∫–∏ –æ–±—ä–µ–∫—Ç–∞ (2D)
    private Rigidbody2D phisic;

    // –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—ä–µ–∫—Ç –≤—Ä–∞–≥–∞
    private GameObject EnemyObj;

    // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–¥–æ—Ä–æ–≤—å—è –æ–±—ä–µ–∫—Ç–∞
    private int HealthPointsTotal;

    // –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –≤—Ä–∞–≥–∞
    private EnemyController Enemy;

    // RaycastHit2D –æ–±—ä–µ–∫—Ç–∞, –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç —Å –¥—Ä—É–≥–∏–º–∏ –∫–æ–ª–ª–∞–π–¥–µ—Ä–∞–º–∏
    public RaycastHit2D hit;

    // –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –¥–æ—Å—Ç–∏–≥–∞–µ—Ç —É–¥–∞—Ä –æ–±—ä–µ–∫—Ç–∞
    public float Distance;

    // –ë—É–ª–µ–≤–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è, –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω–∞–Ω–æ—Å–∏—Ç –ª–∏ –æ–±—ä–µ–∫—Ç —É—Ä–æ–Ω
    bool IsDamage = true;

    // –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –µ—Å—Ç—å –ª–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –º–µ–∂–¥—É —ç—Ç–∏–º –æ–±—ä–µ–∫—Ç–æ–º –∏ –µ–≥–æ —Ü–µ–ª—å—é
    public RaycastHit2D maskHit;

    // –í–µ–∫—Ç–æ—Ä —Å–∫–æ—Ä–æ—Å—Ç–∏ –æ–±—ä–µ–∫—Ç–∞
    private Vector2 phisVelocity;

    // –°—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—ä–µ–∫—Ç–∞
    public int Cost;

    // –°—Å—ã–ª–∫–∞ –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —É–ø—Ä–∞–≤–ª—è—é—â–∏–π –∫–ª–∞—Å—Å –∏–≥—Ä—ã (–∏–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä —Å—Ü–µ–Ω—ã)
    private GameManager _GameManager;
    /// <summary>
    /// –ú–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –¥–æ –ø–µ—Ä–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–¥—Ä–∞, –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã –±—ã–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.
    /// </summary>
    private void Start()
    {
        try
        {
            // –ù–∞—Ö–æ–¥–∏—Ç –æ–±—ä–µ–∫—Ç —Ç–∏–ø–∞ 'GameManager' –≤ —Å—Ü–µ–Ω–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π '_GameManager'.
            _GameManager = FindObjectOfType<GameManager>();

            // –ü–æ–ª—É—á–∞–µ—Ç 'Animator' –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π 'animator'.
            animator = GetComponent<Animator>();

            // –ü–æ–ª—É—á–∞–µ—Ç 'SpriteRenderer' –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π 'sr'.
            sr = GetComponent<SpriteRenderer>();

            // –ü–æ–ª—É—á–∞–µ—Ç 'Rigidbody2D' –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π 'phisic'.
            phisic = GetComponent<Rigidbody2D>();

            // –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ 'HealthPoints' –≤ 'HealthPointsTotal', –æ–±–æ–∑–Ω–∞—á–∞—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ.
            HealthPointsTotal = HealthPoints;

            // –í—ã—á–∏—Å–ª—è–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –∫–∞–∫ —Ä–∞–∑–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞ –ø–æ –æ—Å–∏ X.
            Distance = gameObject.transform.localScale.x;

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–≤–Ω–æ–π —Ç–µ–∫—É—â–µ–º—É –∑–Ω–∞—á–µ–Ω–∏—é –∑–¥–æ—Ä–æ–≤—å—è 'HealthPoints'.
            Cost = HealthPoints;

            // –µ—Å—Ç—å –∫–æ–º–º–µ–Ω—Ç—ã üòä
        }
        catch (System.Exception e)
        {
            // –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –≤–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –∫–æ–Ω—Å–æ–ª–∏ Unity
            Debug.Log(e);
            throw;
        }
    }
    /// <summary>
    /// –ú–µ—Ç–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö. –í—ã–∑—ã–≤–∞–µ—Ç—Å—è —Å —á–∞—Å—Ç–æ—Ç–æ–π —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–∞–¥—Ä–æ–≤.
    /// </summary>
    private void FixedUpdate()
    {
        try
        {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª–æ–π –∫–æ–º–∞–Ω–¥—ã, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å–ª–æ—é —ç—Ç–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞.
            TeamLayer = 1 << gameObject.layer;

            // –ø—Ä–æ–≤–µ—Ä–∫–∞ —É—Ä–æ–≤–Ω—è
            LayerCheck();
            // –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–≤–æ—Ä–æ—Ç–∞ —Å–ø—Ä–∞–π—Ç–∞
            SpriteCheck();
            // –∞—Ç–∞–∫–∞
            Attack();
        }
        catch (System.Exception e)
        {
            // –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –≤–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –∫–æ–Ω—Å–æ–ª–∏ Unity
            Debug.Log(e);
            throw;
        }
    }
    /// <summary>
    /// –ú–µ—Ç–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Ä–æ–≤–Ω—è –æ–±—ä–µ–∫—Ç–∞.
    /// 
    /// </summary>
    private void LayerCheck()
    {
        // –ï—Å–ª–∏ —ç—Ç–æ—Ç –æ–±—ä–µ–∫—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–ª–æ–µ 6, —ç—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –æ–Ω –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ.
        if (gameObject.layer == 6)
        {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª–æ–π –≤—Ä–∞–≥–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ–º —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å.
            NeedLayer = 1 << 8;

            // –û—Ç–º–µ–Ω—è–µ–º –æ—Ç—Ä–∞–∂–µ–Ω–∏–µ —Å–ø—Ä–∞–π—Ç–∞ –ø–æ –æ—Å–∏ X.
            sr.flipX = false;
        }

        // –ï—Å–ª–∏ —ç—Ç–æ—Ç –æ–±—ä–µ–∫—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–ª–æ–µ 8, —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –µ–≥–æ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –∫ –¥—Ä—É–≥–æ–π –∫–æ–º–∞–Ω–¥–µ.
        if (gameObject.layer == 8)
        {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª–æ–π –≤—Ä–∞–≥–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ–º —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å.
            NeedLayer = 1 << 6;

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ç—Ä–∞–∂–µ–Ω–∏–µ —Å–ø—Ä–∞–π—Ç–∞ –ø–æ –æ—Å–∏ X.
            sr.flipX = true;
        }
    }
    /// <summary>
    /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–≤–æ—Ä–æ—Ç–∞ —Å–ø—Ä–∞–π—Ç–∞.
    /// –í –∫–∞–∫—É—é –ø–æ–≤—ë—Ä–Ω—É—Ç, –≤ —Ç—É –∏–¥—ë—Ç –∏ –∞—Ç–∞–∫–∞–µ—Ç
    /// </summary>
    private void SpriteCheck()
    {
        // –ï—Å–ª–∏ —Å–ø—Ä–∞–π—Ç –æ—Ç—Ä–∞–∂–µ–Ω –ø–æ –æ—Å–∏ X, –Ω–∞—à –ø–µ—Ä—Å–æ–Ω–∞–∂ –¥–≤–∏–∂–µ—Ç—Å—è –≤ –æ–¥–Ω—É —Å—Ç–æ—Ä–æ–Ω—É.
        if (sr.flipX)
        {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è.
            Distance = 1f;
            phisVelocity = new Vector2(Speed, 0);  // –≠—Ç–æ –≤–µ–∫—Ç–æ—Ä —Å–∫–æ—Ä–æ—Å—Ç–∏.
        }
        else  // –ï—Å–ª–∏ —Å–ø—Ä–∞–π—Ç –Ω–µ –æ—Ç—Ä–∞–∂–µ–Ω, –ø–µ—Ä—Å–æ–Ω–∞–∂ –¥–≤–∏–∂–µ—Ç—Å—è –≤ –¥—Ä—É–≥—É—é —Å—Ç–æ—Ä–æ–Ω—É.
        {
            Distance = -1f;
            phisVelocity = new Vector2(-Speed, 0);
        }
    }
    /// <summary>
    /// –ê—Ç–∞–∫–∞!!!
    /// –ï—Å–ª–∏ –Ω–∞ —Ä–∞—Å—Ç–æ—è–Ω–∏–∏ –≤ Distance –ø–æ—è–≤–ª—è–µ—Ç—Å—è –∫–∞–∫–æ–π-—Ç–æ –æ–±—ä–µ–∫—Ç (–≤—Ä–∞–≥ –∏–ª–∏ –≤—Ä–∞–∂. –±–∞–∑–∞), —Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞—Ç–∞–∫–∞ –ø–æ –Ω–µ–º—É.
    /// </summary>
    private void Attack()
    {
        // –í—ã–ø–æ–ª–Ω—è–µ–º –ª—É—á–µ–≤–æ–π –∑–∞–º–µ—Ä (Raycast) –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –¥–≤–∏–∂–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ —Å–ª–æ–µ 'NeedLayer'.
        maskHit = Physics2D.Raycast(gameObject.transform.position, new Vector2(Distance, 0), 1f, NeedLayer);

        // –ï—Å–ª–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ Raycast –º—ã –Ω–∞—à–ª–∏ –æ–±—ä–µ–∫—Ç...
        if (maskHit.transform != null && maskHit.transform.tag != "PlayerBase" && maskHit.transform.tag != "EnemyBase")
        {
            // –í—ã–≤–æ–¥–∏–º –º–µ—Ç–∫—É –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –≤ –∫–æ–Ω—Å–æ–ª—å.
            Debug.Log(maskHit.transform.tag);

            // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –≤—Ä–∞–≥–∞.
            EnemyObj = maskHit.transform.gameObject;

            // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –≤—Ä–∞–≥–∞.
            Enemy = EnemyObj.GetComponent<Enemycontroller>();

            // –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ –Ω–∞–Ω–µ—Å–µ–Ω–∏–µ —É—Ä–æ–Ω–∞, –Ω–∞—á–∏–Ω–∞–µ–º –∞—Ç–∞–∫—É.
            if (IsDamage)
            {
                StartCoroutine(CooldownAttack());
            }

            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.
            phisic.velocity = Vector2.zero;

            // –ú–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –Ω–∞ '–Ω–µ–ø–æ–¥–≤–∏–∂–Ω–æ–µ'.
            animator.SetBool("IsMove", false);
        }
        else  // –ï—Å–ª–∏ –æ–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ–Ω –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ...
        {
            // –í—ã–ø–æ–ª–Ω—è–µ–º –ª—É—á–µ–≤–æ–π –∑–∞–º–µ—Ä (Raycast) –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –¥–≤–∏–∂–µ–Ω–∏—è –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–≤–æ–∏—Ö.
            int count = Physics2D.RaycastAll(gameObject.transform.position, new Vector2(Distance, 0), 1f, TeamLayer).Length;

            // –ï—Å–ª–∏ —Ä—è–¥–æ–º –µ—Å—Ç—å –µ—â–µ –æ–¥–∏–Ω –Ω–∞—à, –ø–µ—Ä–µ—Å—Ç–∞–µ–º –¥–≤–∏–≥–∞—Ç—å—Å—è.
            if (count == 2)
            {
                phisic.velocity = Vector2.zero;
                animator.SetBool("IsMove", false);
            }
            else  // –ï—Å–ª–∏ —Ä—è–¥–æ–º –Ω–µ—Ç —Å–≤–æ–∏—Ö, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ.
            {
                phisic.velocity = phisVelocity;
                animator.SetBool("IsMove", true);
            }
        }
    }
    /// <summary>
    /// –°–æ–ø—Ä–æ–≥—Ä–∞–º–º–∞, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∞—è —Å–æ–±–æ–π –ø–∞—É–∑—É –º–µ–∂–¥—É –∞—Ç–∞–∫–∞–º–∏.
    /// –ù–∞–Ω–æ—Å–∏—Ç —É—Ä–æ–Ω –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫—É, –æ–∂–∏–¥–∞–µ—Ç 1 —Å–µ–∫—É–Ω–¥—É, –∑–∞—Ç–µ–º –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞–Ω–µ—Å—Ç–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —É—Ä–æ–Ω.
    /// </summary>
    /// <returns>–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–∂–∏–¥–∞–Ω–∏–µ.</returns>
    private IEnumerator CooldownAttack()
    {
        try
        {
            // –û–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ, —á—Ç–æ —É—Ä–æ–Ω –≤ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç –Ω–µ –Ω–∞–Ω–æ—Å–∏—Ç—Å—è.
            IsDamage = false;
            // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —É—Ä–æ–Ω–∞ –∫ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫—É.
            Enemy.Damage(DamagPoints);

            // –ü–∞—É–∑–∞ –≤ –æ–¥–Ω—É —Å–µ–∫—É–Ω–¥—É. –í—Ä–µ–º—è, –≤ —Ç–µ—á–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–Ω –Ω–µ –±—É–¥–µ—Ç –Ω–∞–Ω–æ—Å–∏—Ç—å—Å—è.
            yield return new WaitForSeconds(1f);

            // –ü–æ—Å–ª–µ –ø—Ä–æ—à–µ—Å—Ç–≤–∏—è –≤–µ–ª–∏—á–∏–Ω—ã –≤—Ä–µ–º–µ–Ω–∏ "–æ—Å—Ç—ã–≤–∞–Ω–∏—è", —É—Ä–æ–Ω —Å–Ω–æ–≤–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞–Ω–µ—Å—ë–Ω.
            IsDamage = true;
        }
        catch (System.Exception e)
        {
            // –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –≤–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –∫–æ–Ω—Å–æ–ª–∏ Unity
            Debug.Log(e);
            throw;
        }
    }
    /// <summary>
    /// –ü–æ–ª—É—á–µ–Ω–∏–µ —É—Ä–æ–Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–æ—Å—ã –µ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è.
    /// –ï—Å–ª–∏ –∑–¥–æ—Ä–æ–≤—å–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–∞–¥–∞–µ—Ç –¥–æ 0 –∏–ª–∏ –º–µ–Ω—å—à–µ, –ø–µ—Ä—Å–æ–Ω–∞–∂ —É–Ω–∏—á—Ç–æ–∂–∞–µ—Ç—Å—è.
    /// </summary>
    /// <param name="dmg">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–Ω–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∫ –ø–µ—Ä—Å–æ–Ω–∞–∂—É.</param>
    public void Damage(int dmg)
    {
        try
        {
            // –£–º–µ–Ω—å—à–∞–µ–º –æ—á–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –Ω–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —É—Ä–æ–Ω.
            HealthPoints -= dmg;

            // –ï—Å–ª–∏ —ç—Ç–æ —É–±–∏–ª–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, —É–Ω–∏—á—Ç–æ–∂–∞–µ–º –µ–≥–æ.
            if (HealthPoints <= 0)
            {
                Destroy(gameObject);
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª–æ—Å—ã –∑–¥–æ—Ä–æ–≤—å—è.
            HPbar.transform.localScale = new Vector3((float)HealthPoints / HealthPointsTotal, 0.1375f, 1f);
        }
        catch (System.Exception e)
        {
            // –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –≤–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –∫–æ–Ω—Å–æ–ª–∏ Unity üòë
            Debug.Log(e);
            throw;
        }
    }
    /// <summary>
    /// –ú–µ—Ç–æ–¥ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –ª—É—á–µ–≤—ã—Ö –≤—ã—Å—Ç—Ä–µ–ª–æ–≤ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ Unity –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏.
    /// </summary>
    private void OnDrawGizmos()
    {
        try
        {
            // –ó–∞–¥–∞–µ–º —Ü–≤–µ—Ç –ª—É—á–∞.
            Gizmos.color = Color.red;

            // –†–∏—Å—É–µ–º –ª—É—á.
            Gizmos.DrawRay(gameObject.transform.position, new Vector2(Distance, 0));
        }
        catch (System.Exception e)
        {
            // –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –≤–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –∫–æ–Ω—Å–æ–ª–∏ Unity
            Debug.Log(e);
            throw;
        }
    }
}
